import { createFFmpeg, fetchFile } from "@ffmpeg/ffmpeg";
import { useQuery } from "@tanstack/react-query";
import { saveAs } from "file-saver";
import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import Dropzone from 'react-dropzone';
import useNotification from "../components/snackbar";

const ffmpeg = createFFmpeg({
  corePath: "https://cdn.jsdelivr.net/npm/@ffmpeg/core@0.11.0/dist/ffmpeg-core.js",
  wasmPath: "https://cdn.jsdelivr.net/npm/@ffmpeg/core@0.11.0/dist/ffmpeg-core.wasm",
});

const Home: NextPage = () =>
{
  const [hover, setHover] = useState(false);
  const [progress, setProgress] = useState<null | number>(null);
  const { notify } = useNotification();

  const { isLoading } = useQuery(["initialize"], async () =>
  {
    if (!ffmpeg.isLoaded())
    {
      await ffmpeg.load();
    }
  }, { staleTime: Infinity, refetchOnMount: true });

  const handleFiles = async (files: File[]) =>
  {
    const file = files[0]!;
    if (file.name.toLowerCase().endsWith(".mp4"))
    {
      // remove file extension from file.name
      const fileName = file.name.replace(/\.[^/.]+$/, "");
      const compressedName = `${fileName}-compressed.mp4`;
      ffmpeg.FS('writeFile', file.name, await fetchFile(file));

      ffmpeg.setProgress((p) => setProgress(Math.round(p.ratio * 100)));

      try
      {
        await ffmpeg.run(
          '-i', file.name,
          '-c:v', 'libx264',
          '-crf', '32',
          '-preset', 'faster',
          compressedName
        );
      }
      catch
      {
        notify("An error occurred while compressing the video.");
      }


      setProgress(null);

      const data = ffmpeg.FS('readFile', compressedName);
      saveAs(new Blob([data.buffer], { type: `video/mp4` }), compressedName);
    }
    else 
    {
      notify("Invalid file type");
    }
  };

  return (
    <>
      <Head>
        <title>Compress Stuff</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col bg-gradient-to-br from-slate-900 to-slate-800 h-screen">
        <h1 className="pt-20 text-slate-900 font-extrabold text-4xl sm:text-5xl lg:text-6xl tracking-tight text-center dark:text-white">
          Compress Your Stuff
        </h1>
        <p className="mt-6 text-lg text-slate-600 text-center max-w-3xl mx-auto dark:text-slate-400">
          (Fully In-Browser ðŸ˜Ž)
        </p>
        <div className="grow justify-center flex justify-center items-center w-full">
          {
            isLoading &&
            <div className="border border-slate-700 shadow rounded-md p-4 max-w-md w-full mx-auto">
              <div className="animate-pulse flex space-x-4">
                <div className="flex-1 space-y-6 py-1">
                  <div className="h-4 bg-slate-700 rounded"></div>
                  <div className="space-y-3">
                    <div className="grid grid-cols-3 gap-4">
                      <div className="h-2 bg-slate-700 rounded col-span-2"></div>
                      <div className="h-2 bg-slate-700 rounded col-span-1"></div>
                    </div>
                    <div className="h-2 bg-slate-700 rounded"></div>
                  </div>
                  <div className="space-y-3">
                    <div className="h-2 bg-slate-700 rounded col-span-1"></div>
                  </div>
                </div>
              </div>
            </div>
          }
          {(progress !== null && !isLoading) &&
            <div className="w-1/2 rounded-full h-3 dark:bg-slate-600">
              <div className="bg-cyan-400 h-3 rounded-full transition-all" style={{ width: `${progress}%` }}></div>
            </div>
          }{(progress === null && !isLoading) &&
            <Dropzone
              onDragOver={() => setHover(true)}
              onDragLeave={() => setHover(false)}
              onDropAccepted={() => setHover(false)}
              onDropRejected={() => setHover(false)}
              onDrop={handleFiles}>
              {({ getRootProps, getInputProps }) => (
                <label {...getRootProps()} htmlFor="dropzone-file"
                  className={`${hover ? 'bg-slate-700' : 'bg-slate-800'}
                m-12 flex flex-col justify-center items-center w-1/2 h-64  rounded-lg border-2 border-slate-500 border-dashed cursor-pointer hover:bg-slate-700`}>
                  <div className="flex flex-col justify-center items-center p-6">
                    <svg aria-hidden="true" className="mb-3 w-10 h-10 text-gray-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path></svg>
                    <p className="mb-2 text-sm text-gray-500 dark:text-gray-200 text-center"><span className="font-semibold">Click to upload</span> or drag and drop</p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">.MP4 Supported</p>
                  </div>
                  <input {...getInputProps()} id="dropzone-file" type="file" className="hidden" accept=".mp4" />
                </label>
              )}
            </Dropzone>
          }
        </div>
      </div>
    </>
  );
};

// const NotifyError = () =>
// {
//   const timer = useRef(null);

//   useEffect(() => {

//   })

//   return (
//     <div id="toast-danger" className="flex items-center p-4 mb-4 w-full max-w-xs text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert">
//       <div className="inline-flex flex-shrink-0 justify-center items-center w-8 h-8 text-red-500 bg-red-100 rounded-lg dark:bg-red-800 dark:text-red-200">
//         <svg aria-hidden="true" className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd"></path></svg>
//         <span className="sr-only">Error icon</span>
//       </div>
//       <div className="ml-3 text-sm font-normal">Item has been deleted.</div>
//       <button type="button" className="ml-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-dismiss-target="#toast-danger" aria-label="Close">
//         <span className="sr-only">Close</span>
//         <svg aria-hidden="true" className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd"></path></svg>
//       </button>
//     </div>
//   );
// };

export default Home;
