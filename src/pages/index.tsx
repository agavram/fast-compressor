import { createFFmpeg, fetchFile } from "@ffmpeg/ffmpeg";
import { useQuery } from "@tanstack/react-query";
import { saveAs } from "file-saver";
import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import Dropzone from 'react-dropzone';

const ffmpeg = createFFmpeg({
  corePath: "https://cdn.jsdelivr.net/npm/@ffmpeg/core@0.11.0/dist/ffmpeg-core.js",
  wasmPath: "https://cdn.jsdelivr.net/npm/@ffmpeg/core@0.11.0/dist/ffmpeg-core.wasm",
});

const Home: NextPage = () =>
{
  const [hover, setHover] = useState(false);
  const [progress, setProgress] = useState<null | number>(null);

  const { isLoading } = useQuery(["initialize"], async () =>
  {
    if (!ffmpeg.isLoaded())
    {
      await ffmpeg.load();
    }
  }, { staleTime: Infinity, refetchOnMount: true });

  const handleFiles = async (files: File[]) =>
  {
    const file = files[0]!;

    // remove file extension from file.name
    const fileName = file.name.replace(/\.[^/.]+$/, "");
    const compressedName = `${fileName}-compressed.mp4`;
    ffmpeg.FS('writeFile', file.name, await fetchFile(file));

    ffmpeg.setProgress((p) => setProgress(Math.round(p.ratio * 100)));

    await ffmpeg.run(
      '-i', file.name,
      '-c:v', 'libx264',
      '-crf', '28',
      '-preset', 'superfast',
      compressedName
    );

    setProgress(null);

    const data = ffmpeg.FS('readFile', compressedName);
    saveAs(new Blob([data.buffer], { type: `video/mp4` }), compressedName);
  };

  return (
    <>
      <Head>
        <title>Compress Stuff</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col bg-gradient-to-br from-slate-900 to-slate-800 h-screen">
        <h1 className="pt-20 text-slate-900 font-extrabold text-4xl sm:text-5xl lg:text-6xl tracking-tight text-center dark:text-white">
          Compress Your Stuff
        </h1>

        <div className="grow justify-center flex justify-center items-center w-full">
          {
            isLoading &&
            <div className="border border-slate-700 shadow rounded-md p-4 max-w-md w-full mx-auto">
              <div className="animate-pulse flex space-x-4">
                <div className="flex-1 space-y-6 py-1">
                  <div className="h-4 bg-slate-700 rounded"></div>
                  <div className="space-y-3">
                    <div className="grid grid-cols-3 gap-4">
                      <div className="h-2 bg-slate-700 rounded col-span-2"></div>
                      <div className="h-2 bg-slate-700 rounded col-span-1"></div>
                    </div>
                    <div className="h-2 bg-slate-700 rounded"></div>
                  </div>
                  <div className="space-y-3">
                    <div className="h-2 bg-slate-700 rounded col-span-1"></div>
                  </div>
                </div>
              </div>
            </div>
          }
          {(progress !== null && !isLoading) &&
            <div className="w-1/2 rounded-full h-3 dark:bg-slate-600">
              <div className="bg-cyan-400 h-3 rounded-full transition-all" style={{ width: `${progress}%` }}></div>
            </div>
          }{(progress === null && !isLoading) &&
            <Dropzone
              onDragOver={() => setHover(true)}
              onDragLeave={() => setHover(false)}
              onDropAccepted={() => setHover(false)}
              onDropRejected={() => setHover(false)}
              onDrop={handleFiles}>
              {({ getRootProps, getInputProps }) => (
                <label {...getRootProps()} htmlFor="dropzone-file"
                  className={`${hover ? 'bg-slate-700' : 'bg-slate-800'}
                m-12 flex flex-col justify-center items-center w-1/2 h-64  rounded-lg border-2 border-slate-500 border-dashed cursor-pointer hover:bg-slate-700`}>
                  <div className="flex flex-col justify-center items-center p-6">
                    <svg aria-hidden="true" className="mb-3 w-10 h-10 text-gray-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path></svg>
                    <p className="mb-2 text-sm text-gray-500 dark:text-gray-200 text-center"><span className="font-semibold">Click to upload</span> or drag and drop</p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">.MP4 Supported</p>
                  </div>
                  <input {...getInputProps()} id="dropzone-file" type="file" className="hidden" accept=".mp4" />
                </label>
              )}
            </Dropzone>
          }
        </div>
      </div>
    </>
  );
};

export default Home;
